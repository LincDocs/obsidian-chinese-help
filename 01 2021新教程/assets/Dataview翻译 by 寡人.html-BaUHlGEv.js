import{_ as e,c as l,a as s,e as t,b as h,d as a,w as d,r as p,o as k}from"./app-IauDOiRz.js";const r={};function c(o,i){const n=p("RouteLink");return k(),l("div",null,[s("p",null,[h(n,{to:"/寡人.html"},{default:d(()=>[...i[0]||(i[0]=[a("寡人",-1)])]),_:1}),i[1]||(i[1]=s("br",null,null,-1)),i[2]||(i[2]=a(" 最新的图文版：",-1)),i[3]||(i[3]=s("a",{href:"https://wws.lanzoui.com/ivW46spygfi",target:"_blank",rel:"noopener noreferrer"},"https://wws.lanzoui.com/ivW46spygfi",-1))]),i[4]||(i[4]=t(`<blockquote><p>翻译自 <a href="https://blacksmithgu.github.io/obsidian-dataview/intro/" target="_blank" rel="noopener noreferrer">Dataview</a>，翻译了一部分，有不对的自行辨别，希望可以帮助更多人使用 dataview 这款优秀的 obsidian 插件。</p></blockquote><h1 id="dataview" tabindex="-1">dataview</h1><h2 id="查询语法格式" tabindex="-1">查询语法格式</h2><p>该插件的 dataview 代码块的使用方法类似于SQL，下面是一个普通的SQL语句：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> field1 (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">AS</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;自定义显示名称&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),field2……,fieldn </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> tablename </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> field1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">value1 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">or</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> field2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">value2</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ORDER BY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> field1 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">DESC</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">……(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">LIMIT</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>dataview的查询格式如下：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">​</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`\`\`dataview</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">TABLE|LIST|TASK &lt;field&gt; (AS &quot;Column Name&quot;), &lt;field&gt;, ..., &lt;field&gt; </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">FROM &lt;source&gt;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">WHERE &lt;expression&gt;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">SORT &lt;expression&gt; (ASC/DESC)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">... other data commands</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">​\`\`\`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，二者很像，可以清楚的看到其中的对应关系，tablename对应着source等等。</p><h2 id="关键字" tabindex="-1">关键字</h2><p>介绍 dataview 查询格式中的关键字的用途。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">​</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`\`\`dataview</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">TABLE|LIST|TASK &lt;field&gt; (AS &quot;Column Name&quot;), &lt;field&gt;, ..., &lt;field&gt; </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">FROM &lt;source&gt;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">WHERE &lt;expression&gt;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">SORT &lt;expression&gt; (ASC/DESC)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">... other data commands</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">​\`\`\`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-table-list-task-指定查询的方式" tabindex="-1">1. TABLE/LIST/TASK 指定查询的方式</h3><p>dataview 现支持以下3中查询方式：</p><ol><li><p><strong>TABLE</strong>：表格视图，可以输出一个页面的多个该页面的字段值，后面可跟多个 field 并输出字段值。<br> 下面的例子以表格的形式输出文件的标签和创建时间：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">​</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`\`\`dataview</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">table file.tags as 标签,file.ctime</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">limit 100</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">​\`\`\`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>LIST</strong>：列表视图，每个页面只能输出一个该页面的字段值，或者使用加号输出多个字段值（不建议）。<br> 下面的例子输出文件的标签加文件创建时间：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">​</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`\`\`dataview</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">list file.tags + file.ctime</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">limit 100</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">​\`\`\`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>TASK</strong>：任务视图。<br> 下面的例子用于展示5个有任务的文档的任务：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">​</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`\`\`dataview</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">task</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">where file.tasks</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">limit 5</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">​\`\`\`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="_2-from-查询的文档源" tabindex="-1">2. FROM 查询的文档源</h3><p>指定查询源，即文档的初步筛选，详见 [source](#1. source 源)。</p><h3 id="_3-where-条件筛选" tabindex="-1">3. WHERE 条件筛选</h3><p>根据字段筛选页面，只有表达式结果为 <code>true</code> 的页面才会被输出。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>WHERE &lt;clause&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol><li><p>获取最近24h内修改过的页面：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>LIST WHERE file.mtime &gt;= date(today) - dur(1 day)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>获取未完成并且创建时间距今1个月的项目：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>LIST FROM #projects</span></span>
<span class="line"><span>WHERE !completed AND file.ctime &lt;= date(today) - dur(1 month)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="_4-sort-排序" tabindex="-1">4. SORT 排序</h3><p>按一个或多个字段对所有结果进行排序。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>SORT date [ASCENDING/DESCENDING/ASC/DESC]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>您还可以提供多个字段进行排序。将根据第一个字段进行排序。然后，如果出现平局，第二个字段将用于对平局字段进行排序。如果仍然存在平局，则第三类将解决它，依此类推。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>SORT field1 [ASCENDING/DESCENDING/ASC/DESC], ..., fieldN [ASC/DESC]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_5-group-by-分组" tabindex="-1">5. GROUP BY 分组</h3><p>将所有结果分组到一个字段上。为每个唯一字段值生成一行，该字段有两个属性：一个对应于要分组的字段，另一个是 <code>rows</code> 多行数组字段，其中包含匹配的所有页面。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>GROUP BY field</span></span>
<span class="line"><span>GROUP BY (computed_field) AS name</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>为了使用 <code>rows</code> 多行数组更容易，Dataview 支持字段 “swizzling”。如果要从 <code>rows</code> 多行数组中的每个对象获取字段 <code>test</code>，则 <code>rows.test</code> 将自动从 <code>rows</code> 多行数组中的每个对象获取 <code>test</code> 字段，从而生成一个新数组。然后可以对结果数组应用聚合运算符，如 <code>sum()</code>。</p><p>例如，使用以下代码可以依照标签分组并输出文件名称：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">​</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`\`\`dataview</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">table rows.file.name as 文件名称</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">where file.tags</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">group by file.tags</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">​\`\`\`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-flatten-扁平化" tabindex="-1">6. FLATTEN 扁平化</h3><p>展平每行中的数组，在数组中的每个条目中生成一个结果行。（不会用，总是报错）</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">FLATTEN field</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">FLATTEN (computed_field) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">AS</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> name</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-limit-输出结果数目限制" tabindex="-1">7. LIMIT 输出结果数目限制</h3><p>限制输出结果的数目。</p><p>下面的例子输出2个结果：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">​</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`\`\`dataview</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">table file</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">limit 2</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">​\`\`\`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="关键字后面的内容" tabindex="-1">关键字后面的内容</h2><p>介绍 dataview 查询格式中关键字后面的内容怎么填。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">​</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`\`\`dataview</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">TABLE|LIST|TASK &lt;field&gt; (AS &quot;Column Name&quot;), &lt;field&gt;, ..., &lt;field&gt; </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">FROM &lt;source&gt;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">WHERE &lt;expression&gt;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">SORT &lt;expression&gt; (ASC/DESC)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">... other data commands</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">​\`\`\`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-source-源" tabindex="-1">1. source 源</h3><ul><li><strong>标签</strong>：选择一个标签， <code>FROM #tag</code>.</li><li><strong>文件夹</strong>：选择一个文件夹, <code>FROM &quot;folder&quot;</code>.</li><li><strong>链接文件</strong>：选择链接到某文档的文档，或被某文档所链接的文档： <ul><li>链接到某文档的文档，<code>FROM [[note]]</code>.</li><li>某文档链接的文档， <code>FROM outgoing([[note]])</code>.</li></ul></li><li>上面的源也可以使用 <code>and</code> 和 <code>or</code> 组合起来进行使用，举例说明： <ul><li><code>#tag and &quot;folder&quot;</code> 会返回所有在 <code>folder</code> 文件夹下且带有 <code>#tag</code> 标签的文档。</li><li><code>[[Food]] or [[Exercise]]</code> 会返回任何链接到 <code>[[Food]]</code> 或 <code>[[Exercise]]</code> 的文件。</li></ul></li></ul><h3 id="_2-field-字段" tabindex="-1">2. field 字段</h3><ul><li><p>内置字段：</p><ul><li><p>想查看 file 有哪些属性？可以使用下列代码来进行查看</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">​</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`\`\`dataview</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">table file</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">limit 1</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">​\`\`\`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>自定义字段：</p><ul><li>在文档中以 <code>字段名1::值1</code> 的格式创建新的字段值</li></ul></li></ul><h3 id="_3-expression-表达式" tabindex="-1">3. expression 表达式</h3><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 一般操作</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">field				(直接指向一个field)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">simple</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-field		(指向带有空格或标点的fields，例如</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Simple Field!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">					(如果 a 是一个对象，返回其字段</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;b&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">的值)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[expr]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">             (如果 a 是一个对象或者数组，返回带有名称为 </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;expr&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 的 field)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">f(a, b, ...)        (调用名为 </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`f\`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 的函数并输入参数：a, b, ...)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 数学运算</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a + b               (加法)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a - b               (减法)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a * b               (乘法)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a / b               (除法)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 比较</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b               (检查 a 是否大于 b)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b               (检查 a 是否小于 b)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b               (检查 a 是否等于 b)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b              (检查 a 是否不等于 b)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b              (检查 a 是否小于等于 b)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b              (检查 a 是否大于等于 b)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 特殊操作</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[[Link]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">].</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      (从页面 </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`Link\`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 获取 </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`value\`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 的值)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述表达式的详细信息见下方。</p><h4 id="fields-字段名" tabindex="-1">fields 字段名</h4><ul><li>最简单的就是直接指向&quot;字段名&quot;。 <ul><li>例如你在某个文档内有一个字段名叫 &quot;field&quot;，那么你就可以直接指向字段的名字 <code>field</code> 以获得拥有该字段名的文档。</li></ul></li><li>如果&quot;字段名&quot;中包含空格、标点符号或者其它的非字母或数字的字符，那么你就可以使用 Dataview 的简化名称，它会将所有字母小写，并将空格替换为&quot;-&quot;。例如： <ul><li>使用 <code>this-is-a-field</code> 可以获得字段名诸如 <code>this is a field</code> 、<code>THIS is a FIELD</code> 等的文档</li><li>使用 <code>hello</code> 可以获得拥有字段名诸如 <code>Hello!</code> 等的文档。（经测试无效）</li></ul></li></ul><h4 id="数学运算" tabindex="-1">数学运算</h4><p>可以使用标准运算符组合字段：加(<code>+</code>)，减(<code>-</code>)，乘 (<code>*</code>)，除 (<code>/</code>)。例如 <code>field1 + field2</code> 是一个求取字段和的表达式。</p><h4 id="比较" tabindex="-1">比较</h4><p>您可以使用各种比较运算符来比较大多数值：<code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>&gt;=</code>、<code>=</code>、<code>=</code>、<code>！=</code>。这将产生一个布尔真值（true）或假值（false）。</p><h4 id="数组-对象索引" tabindex="-1">数组/对象索引</h4><p>您可以通过索引操作符 <code>array[&lt;index&gt;]</code> 从<strong>数组</strong>中检索数据，其中 <code>&lt;index&gt;</code> 是<strong>任何计算表达式</strong>。数组的第一个元素的索引是0，第二个元素是索引1，依此类推。例如列表 <code>(1，2，3)[0]=1</code>。</p><p>还可以使用索引操作符从<strong>对象</strong>（将文本映射到数据值）检索数据，其中索引现在是<strong>字符串/文本，而不是数字</strong>。您还可以使用缩写 <code>object.&lt;name&gt;</code>，其中 <code>&lt;name&gt;</code> 是要检索的值的名称。例如 <code>object(&quot;yes&quot;, 1).yes=1</code>。</p><h4 id="函数调用" tabindex="-1">函数调用</h4><p>Dataview支持各种用于操作数据的函数，这些函数在 <a href="https://blacksmithgu.github.io/obsidian-dataview/query/expressions/functions" target="_blank" rel="noopener noreferrer">functions documentation</a> 中有详细描述。</p><p>它们具有一般语法<code>function(arg1, arg2, ...)</code>，例如：<code>lower(&quot;yes&quot;)</code> 或者 <code>regexmatch(&quot;text&quot;, &quot;.+&quot;)</code>。</p><p>具体函数详见 [function 函数](#function 函数)。</p><h4 id="特殊类型及其值" tabindex="-1">特殊类型及其值</h4><p>大多数 dataview 类型都与运算符有特殊的交互，或者可以通过索引运算符来检索附加字段。</p><h5 id="dates-日期" tabindex="-1">Dates 日期</h5><p>您可以通过以下方式检索日期的各个部分：<code>date.year</code>、<code>date.month</code>、<code>date.day</code>、<code>date.hour</code>、<code>date.minute</code>、<code>date.second</code>、<code>date.week</code>。您还可以向日期添加持续时间以获取新日期。</p><p>使用举例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>​\`\`\`dataview</span></span>
<span class="line"><span>TABLE file.ctime.year as &quot;这是文件创建日期的年份&quot;</span></span>
<span class="line"><span>LIMIT 1</span></span>
<span class="line"><span>​\`\`\`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="durations-周期" tabindex="-1">Durations 周期</h5><p>持续时间可以相互添加，也可以添加到日期。您可以通过索引检索持续时间的各个组成部分：<code>duration.years</code>、<code>duration.months</code>、<code>duration.days</code>、<code>duration.hours</code>、<code>duration.minutes</code>、<code>duration.seconds</code>。</p><h5 id="links-链接" tabindex="-1">Links 链接</h5><p>您可以通过“索引”链接来获取相应页面上的值。例如 <code>[[Link]].value</code> 将从页面链接获取值。</p><h2 id="function-函数" tabindex="-1">function 函数</h2><p>大多数函数既可以应用于单个值（如数字、字符串、日期等），也可以应用于这些值的列表。如果将函数应用于列表，则在将函数应用于列表中的每个元素后，它也会返回一个列表。例如：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">lower</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;YES&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;yes&quot;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">lower</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(list(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;YES&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;NO&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> list(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;yes&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;no&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">replace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;yes&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;e&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;a&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;yas&quot;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">replace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(list(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;yes&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ree&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;e&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;a&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> list(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;yas&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;raa&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="constructors-构造函数" tabindex="-1">Constructors 构造函数</h3><p>构造器用于创建值。</p><h4 id="object-key1-value1-对象构造器" tabindex="-1"><code>object(key1, value1, ...)</code> 对象构造器</h4><p>Creates a new object with the given keys and values. Keys and values should alternate in the call, and keys should always be strings/text.</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>object() =&gt; empty object</span></span>
<span class="line"><span>object(&quot;a&quot;, 6) =&gt; object which maps &quot;a&quot; to 6</span></span>
<span class="line"><span>object(&quot;a&quot;, 4, &quot;c&quot;, &quot;yes&quot;) =&gt; object which maps a to 4, and c to &quot;yes&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="list-value1-value2-列表构造器" tabindex="-1"><code>list(value1, value2, ...)</code> 列表构造器</h4><p>创造一个新列表并为其赋值。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>list() =&gt; empty list</span></span>
<span class="line"><span>list(1, 2, 3) =&gt; list with 1, 2, and 3</span></span>
<span class="line"><span>list(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) =&gt; list with &quot;a&quot;, &quot;b&quot;, and &quot;c&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="date-any-日期构造器" tabindex="-1"><code>date(any)</code> 日期构造器</h4><p>解析字符串、日期或者链接的对象以获取日期。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>date(&quot;2020-04-18&quot;) = &lt;date object representing April 18th, 2020&gt;</span></span>
<span class="line"><span>date(today) = &lt;date object 今天的日期&gt;</span></span>
<span class="line"><span>date([[2021-04-16]]) = &lt;date object for the given page, refering to file.day&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="dur-周期构造器" tabindex="-1"><code>dur()</code> 周期构造器</h4><p>未找到说明</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>dur(1 day) = 1天的周期</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="number-string-数字构造器" tabindex="-1"><code>number(string)</code> 数字构造器</h4><p>Pulls the first number out of the given string, returning it if possible. Returns null if there are no numbers in the string.</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>number(&quot;18 years&quot;) = 18</span></span>
<span class="line"><span>number(34) = 34</span></span>
<span class="line"><span>number(&quot;hmm&quot;) = null</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="link-path-display-链接" tabindex="-1"><code>link(path, [display])</code> 链接</h4><p>根据参数中的path路径构造一个链接对象。如果输入display参数，则该链接显示名称为display。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>link(&quot;Hello&quot;) =&gt; link to page named &#39;Hello&#39;</span></span>
<span class="line"><span>link(&quot;Hello&quot;, &quot;Goodbye&quot;) =&gt; link to page named &#39;Hello&#39;, displays as &#39;Goodbye&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="elink-url-display-外部链接" tabindex="-1"><code>elink(url, [display])</code> 外部链接</h4><p>构造一个外部链接(例如 <code>www.google.com</code>)。如果输入display参数，则该外链显示名称为display。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>elink(&quot;www.google.com&quot;) =&gt; link element to google.com</span></span>
<span class="line"><span>elink(&quot;www.google.com&quot;, &quot;Google&quot;) =&gt; link element to google.com, displays as &quot;Google&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="numeric-operations-数字操作函数" tabindex="-1">Numeric Operations 数字操作函数</h3><h4 id="round-number-digits" tabindex="-1"><code>round(number, [digits])</code></h4><p>将数字四舍五入到给定的位数。如果未指定第二个参数，则四舍五入到最接近的整数；否则，四舍五入到给定的位数。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>round(16.555555) = 7</span></span>
<span class="line"><span>round(16.555555, 2) = 16.56</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="objects-arrays-and-string-operations-对象、数组、字符串操作" tabindex="-1">Objects, Arrays, and String Operations 对象、数组、字符串操作</h3><p>操作对象内部的值。</p><h4 id="contains-object-list-string-value-是否包含某值" tabindex="-1"><code>contains(object|list|string, value)</code> 是否包含某值？</h4><p>检查给定的容器类型中是否包含给定的值。根据第一个参数是对象、列表还是字符串，此函数的行为略有不同。</p><ul><li><p>对于对象，检查对象是否具有具有给定名称的键。例如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>contains(file, &quot;ctime&quot;) = true</span></span>
<span class="line"><span>contains(file, &quot;day&quot;) = true (if file has a date in its title, false otherwise)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>对于列表，检查是否有任何数组元素等于给定值。例如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>contains(list(1, 2, 3), 3) = true</span></span>
<span class="line"><span>contains(list(), 1) = false</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>对于字符串，检查给定值是否为字符串的子字符串。例如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>contains(&quot;hello&quot;, &quot;lo&quot;) = true</span></span>
<span class="line"><span>contains(&quot;yes&quot;, &quot;no&quot;) = false</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="extract-object-key1-key2-提取对象中的键值" tabindex="-1"><code>extract(object, key1, key2, ...)</code> 提取对象中的键值</h4><p>从对象中提取多个字段，然后可以使用这些字段创建新对象。例如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>extract(file, &quot;ctime&quot;, &quot;mtime&quot;) = object(&quot;ctime&quot;, file.ctime, &quot;mtime&quot;, file.mtime)</span></span>
<span class="line"><span>extract(object(&quot;test&quot;, 1)) = object()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sort-list-列表排序" tabindex="-1"><code>sort(list)</code> 列表排序</h4><p>对列表排序并返回新列表。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>sort(list(3, 2, 1)) = list(1, 2, 3)</span></span>
<span class="line"><span>sort(list(&quot;a&quot;, &quot;b&quot;, &quot;aa&quot;)) = list(&quot;a&quot;, &quot;aa&quot;, &quot;b&quot;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="reverse-list-反转列表" tabindex="-1"><code>reverse(list)</code> 反转列表</h4><p>反转列表，按相反顺序返回新列表。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>reverse(list(1, 2, 3)) = list(3, 2, 1)</span></span>
<span class="line"><span>reverse(list(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)) = list(&quot;c&quot;, &quot;b&quot;, &quot;a&quot;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="length-object-array-长度" tabindex="-1"><code>length(object|array)</code> 长度</h4><p>返回对象中的字段数或数组中的条目数。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>length(list()) = 0</span></span>
<span class="line"><span>length(list(1, 2, 3)) = 3</span></span>
<span class="line"><span>length(object(&quot;hello&quot;, 1, &quot;goodbye&quot;, 2)) = 2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sum-array-数组求和" tabindex="-1"><code>sum(array)</code> 数组求和</h4><p>对数组中的所有数值求和。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>sum(list(1, 2, 3)) = 6</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="all-array-数组值均为真" tabindex="-1"><code>all(array)</code> 数组值均为真？</h4><p>仅当数组中的所有值均为truthy时，才返回 <code>true</code>。您还可以将多个参数传递给此函数，在这种情况下，只有当所有参数都为truthy时，它才会返回 <code>true</code>。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>all(list(1, 2, 3)) = true</span></span>
<span class="line"><span>all(list(true, false)) = false</span></span>
<span class="line"><span>all(true, false) = false</span></span>
<span class="line"><span>all(true, true, true) = true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="any-array-数组值存在真" tabindex="-1"><code>any(array)</code> 数组值存在真？</h4><p>如果数组中的任何值为truthy，则返回 <code>true</code>。您还可以将多个参数传递给此函数，在这种情况下，如果任何参数为truthy，它将返回 <code>true</code>。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>any(list(1, 2, 3)) = true</span></span>
<span class="line"><span>any(list(true, false)) = true</span></span>
<span class="line"><span>any(list(false, false, false)) = false</span></span>
<span class="line"><span>all(true, false) = true</span></span>
<span class="line"><span>all(false, false) = false</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="none-array-数组值均为假" tabindex="-1"><code>none(array)</code> 数组值均为假？</h4><p>如果数组中的值都不是真的，则返回 <code>true</code>。</p><h4 id="join-array-数组拼接成字符串" tabindex="-1"><code>join(array)</code> 数组拼接成字符串</h4><p>将数组中的元素合并为单个字符串。如果提供了第二个参数，则每个元素将由给定的分隔符（即第二个参数）分隔。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>join(list(1, 2, 3)) = &quot;1, 2, 3&quot;</span></span>
<span class="line"><span>join(list(1, 2, 3), &quot; &quot;) = &quot;1 2 3&quot;</span></span>
<span class="line"><span>join(6) = &quot;6&quot;</span></span>
<span class="line"><span>join(list()) = &quot;&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string-operations-字符串操作" tabindex="-1">String Operations 字符串操作</h3><h4 id="regexmatch-pattern-string-正则匹配" tabindex="-1"><code>regexmatch(pattern, string)</code> 正则匹配</h4><p>检查给定字符串是否与给定模式匹配（使用JavaScript正则表达式引擎）。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>regexmatch(&quot;\\w+&quot;, &quot;hello&quot;) = true</span></span>
<span class="line"><span>regexmatch(&quot;.&quot;, &quot;a&quot;) = true</span></span>
<span class="line"><span>regexmatch(&quot;yes|no&quot;, &quot;maybe&quot;) = false</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="regexreplace-string-pattern-replacement-正则替换" tabindex="-1"><code>regexreplace(string, pattern, replacement)</code> 正则替换</h4><p>将 <code>string</code> 中正则匹配式 <code>pattern</code> 匹配的所有实例替换为 <code>replacement</code>。</p><p>这里使用JavaScript替换方法，因此您可以使用诸如 <code>$1</code> 之类的特殊字符来引用第一个匹配的字符串（<code>$2</code> 就是第二个匹配的字符串），等等。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>regexreplace(&quot;yes&quot;, &quot;[ys]&quot;, &quot;a&quot;) = &quot;aea&quot;</span></span>
<span class="line"><span>regexreplace(&quot;Suite 1000&quot;, &quot;\\d+&quot;, &quot;-&quot;) = &quot;Suite -&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="replace-string-pattern-replacement-替换" tabindex="-1"><code>replace(string, pattern, replacement)</code> 替换</h4><p>将 <code>string</code> 中 <code>pattern</code> 匹配的所有字符串替换为 <code>replacement</code>。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>replace(&quot;what&quot;, &quot;wh&quot;, &quot;h&quot;) = &quot;hat&quot;</span></span>
<span class="line"><span>replace(&quot;The big dog chased the big cat.&quot;, &quot;big&quot;, &quot;small&quot;) = &quot;The small dog chased the small cat.&quot;</span></span>
<span class="line"><span>replace(&quot;test&quot;, &quot;test&quot;, &quot;no&quot;) = &quot;no&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="lower-string-转小写" tabindex="-1"><code>lower(string)</code> 转小写</h4><p>将字符串转换为全小写。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>lower(&quot;Test&quot;) = &quot;test&quot;</span></span>
<span class="line"><span>lower(&quot;TEST&quot;) = &quot;test&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="upper-string-转大写" tabindex="-1"><code>upper(string)</code> 转大写</h4><p>将字符串转换为全大写。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>upper(&quot;Test&quot;) = &quot;TEST&quot;</span></span>
<span class="line"><span>upper(&quot;test&quot;) = &quot;TEST&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="utility-functions-实用功能函数" tabindex="-1">Utility Functions 实用功能函数</h3><h4 id="default-field-value-字段默认值" tabindex="-1"><code>default(field, value)</code> 字段默认值</h4><p>如果 <code>field</code> 为空，则返回 <code>value</code>；否则返回 <code>field</code> 的值。</p><p>用于用默认值替换空值。例如，要显示尚未完成的项目，使用 <code>incomplete</code>作为其默认值：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>default(dateCompleted, &quot;incomplete&quot;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>默认值的两个参数中都是矢量化的；如果需要使用列表参数上的默认值，即不对列表的空值做出改变，就使用 <code>ldefault</code>，它与 <code>default</code> 相同，但不是矢量化的。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>default(list(1, 2, null), 3) = list(1, 2, 3)</span></span>
<span class="line"><span>ldefault(list(1, 2, null), 3) = list(1, 2, null)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="choice-bool-left-right-判断输出语句" tabindex="-1"><code>choice(bool, left, right)</code> 判断输出语句</h4><p>如果第一个参数为真，则返回 <code>left</code>；否则返回 <code>right</code>。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>choice(true, &quot;yes&quot;, &quot;no&quot;) = &quot;yes&quot;</span></span>
<span class="line"><span>choice(false, &quot;yes&quot;, &quot;no&quot;) = &quot;no&quot;</span></span>
<span class="line"><span>choice(x &gt; 4, y, z) = y if x &gt; 4, else z</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="striptime-date" tabindex="-1"><code>striptime(date)</code></h4><p>去掉日期的时间部分，只留下年、月和日。如果你不在乎具体时间的话，就可以用它来比较日期。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>striptime(file.ctime) = file.cday</span></span>
<span class="line"><span>striptime(file.mtime) = file.mday</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="dataviewjs" tabindex="-1">dataviewjs</h1><p>Dataview JavaScript API允许通过访问Dataview的索引和查询引擎以执行任意JavaScript，这有利于复杂视图或与其他插件的互操作。</p><h2 id="概览" tabindex="-1">概览</h2><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">​</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`\`\`dataviewjs</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&lt;code&gt;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">​\`\`\`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这些代码块中执行的代码可以访问 <code>dv</code> 变量，该变量提供了与代码块相关的dataview API的全部内容（如 <code>dv.table()</code>、<code>dv.pages()</code> 等）。更多信息见<a href="#%E4%BB%A3%E7%A0%81%E5%9D%97%E5%8F%82%E8%80%83">代码块参考</a>。</p><h2 id="dataarray-数据数组" tabindex="-1">DataArray 数据数组</h2><p>Dataview中的结果列表的一般抽象成 <code>DataArray</code>，它是一个具有附加功能的代理数组。</p><p>数据数组支持索引和迭代（通过 <code>for</code> 和 <code>for ... of</code> 来遍历数组中的项目），还包括许多数据操作符，如 <code>sort</code>，<code>groupBy</code>，<code>distinct</code>，<code>where</code> 等，这使得表格数据的维护变得简单。</p><h3 id="创建-dataarray" tabindex="-1">创建 DataArray</h3><p><code>DataArray</code> 由大多数Dataview API返回，并可以返回多个结果，例如 <code>dv.pages()</code> 返回所有的文档数据数组。</p><h3 id="dataarray-与普通数组的转换" tabindex="-1">DataArray 与普通数组的转换</h3><p>您还可以使用 <code>dv.array(&lt;array&gt;)</code> 将普通JavaScript 数组显式转换为Dataview数组。</p><p>如果要将数据数组转换回普通数组，请使用 <code>DataArray#array()</code>。</p><h3 id="dataarray-索引" tabindex="-1">DataArray 索引</h3><p>数据数组支持常规索引，就像普通数组一样（比如 <code>array[0]</code>）。</p><p>但重要的是，它们还支持查询语言风格的“swizzling”：如果使用字段名（比如 <code>array.field</code>）对数据数组进行索引，它会自动将数组中的每个元素映射到 <code>field</code>，如果 <code>array.field</code> 对应的值本身也是一个数组，则会将 <code>field</code> 变平。</p><p>例如，<code>dv.pages().file.name</code> 将返回库中所有文件名的数据数组。<code>dv.pages（“#books”）.genres</code>将返回书籍中所有类型的扁平列表。</p><h3 id="dataarray-原始接口" tabindex="-1">DataArray 原始接口</h3><p>下面提供了 <code>DataArray</code> 实现的完整的接口以供参考：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/** A function which maps an array element to some value. */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayFunc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">O</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">elem</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">index</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">arr</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[]) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> O</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/** A function which compares two types (plus their indices, if relevant). */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayComparator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">a</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">b</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * Proxied interface which allows manipulating array-based data. All functions on a data array produce a NEW array</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * (i.e., the arrays are immutable).</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DataArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /** The total number of elements in the array. */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    length</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /** Filter the data array down to just elements which match the given predicate. */</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">predicate</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayFunc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">boolean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;)</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DataArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /** Alias for &#39;where&#39; for people who want array semantics. */</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    filter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">predicate</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayFunc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">boolean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;)</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DataArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /** Map elements in the data array by applying a function to each. */</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">U</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">f</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayFunc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">U</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;)</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DataArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">U</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /** Map elements in the data array by applying a function to each, then flatten the results to produce a new array. */</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    flatMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">U</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">f</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayFunc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">U</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[]&gt;)</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DataArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">U</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /** Mutably change each value in the array, returning the same array which you can further chain off of. */</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    mutate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">f</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayFunc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;)</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DataArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /** Limit the total number of entries in the array to the given value. */</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    limit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">count</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DataArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * Take a slice of the array. If \`start\` is undefined, it is assumed to be 0; if \`end\` is undefined, it is assumbed</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * to be the end of the array.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    slice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">start</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">end</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DataArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /** Concatenate the values in this data array with those of another data array. */</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    concat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">other</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DataArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;)</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DataArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /** Return the first index of the given (optionally starting the search) */</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    indexOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">element</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">fromIndex</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /** Return the first element that satisfies the given predicate. */</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    find</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">pred</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayFunc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">boolean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;)</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;"> undefined</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /** Find the index of the first element that satisfies the given predicate. Returns -1 if nothing was found. */</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    findIndex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">pred</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayFunc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">boolean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;)</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /** Returns true if the array contains the given element, and false otherwise. */</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    includes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">element</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> boolean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * Return a sorted array sorted by the given key; an optional comparator can be provided, which will</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * be used to compare the keys in leiu of the default dataview comparator.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    sort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">U</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">key</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayFunc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">U</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">direction</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;asc&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;desc&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">comparator</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayComparator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">U</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;)</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DataArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * Return an array where elements are grouped by the given key; the resulting array will have objects of the form</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * { key: &lt;key value&gt;, rows: DataArray }.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    groupBy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">U</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">key</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayFunc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">U</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">comparator</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayComparator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">U</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;)</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DataArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;{ </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> U</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">rows</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DataArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; }&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * Return distinct entries. If a key is provided, then rows with distinct keys are returned.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    distinct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">U</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">key</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayFunc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">U</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">comparator</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayComparator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">U</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;)</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DataArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /** Return true if the predicate is true for all values. */</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    every</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">f</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayFunc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">boolean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;)</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> boolean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /** Return true if the predicate is true for at least one value. */</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    some</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">f</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayFunc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">boolean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;)</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> boolean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /** Return true if the predicate is FALSE for all values. */</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    none</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">f</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayFunc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">boolean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;)</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> boolean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /** Return the first element in the data array. Returns undefined if the array is empty. */</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    first</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /** Return the last element in the data array. Returns undefined if the array is empty. */</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    last</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /** Map every element in this data array to the given key, and then flatten it.*/</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    to</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">key</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DataArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * Recursively expand the given key, flattening a tree structure based on the key into a flat array. Useful for handling</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * heirarchical data like tasks with &#39;subtasks&#39;.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    expand</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">key</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DataArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /** Run a lambda on each element in the array. */</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    forEach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">f</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayFunc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;)</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /** Convert this to a plain javascript array. */</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    array</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /** Allow iterating directly over the array. */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    [</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Symbol</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">iterator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]()</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Iterator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /** Map indexes to values. */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    [</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">index</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /** Automatic flattening of fields. */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    [</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">field</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="代码块参考" tabindex="-1">代码块参考</h2><h3 id="查询" tabindex="-1">查询</h3><h4 id="dv-current-当前页面" tabindex="-1"><code>dv.current()</code> 当前页面</h4><p>得到当前页面（脚本运行的页面）的信息。</p><h4 id="dv-pages-source-指定源的页面" tabindex="-1"><code>dv.pages(source)</code> 指定源的页面</h4><p>此处的 <code>source</code> 同 dataview 中的一样，详见 [source](#1. source 源)。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>dv.pages(&quot;#books&quot;) =&gt; all pages with tag &#39;books&#39;</span></span>
<span class="line"><span>dv.pages(&#39;&quot;folder&quot;&#39;) =&gt; all pages from folder &quot;folder&quot;</span></span>
<span class="line"><span>dv.pages(&quot;#yes or -#no&quot;) =&gt; all pages with tag #yes, or which DON&#39;T have tag #no</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="dv-pagepaths-source-指定源的页面的路径" tabindex="-1"><code>dv.pagePaths(source)</code> 指定源的页面的路径</h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>dv.pagePaths(&quot;#books&quot;) =&gt; the paths of pages with tag &#39;books&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="dv-page-path-指定路径的页面" tabindex="-1"><code>dv.page(path)</code> 指定路径的页面</h4><p>将简单路径映射到包含所有页面字段的完整页面对象。自动执行链接解析，如果不存在，将自动补充扩展名。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>dv.page(&quot;Index&quot;) =&gt; The page object for /Index</span></span>
<span class="line"><span>dv.page(&quot;books/The Raisin.md&quot;) =&gt; The page object for /books/The Raisin.md</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="渲染" tabindex="-1">渲染</h3><h4 id="dv-header-level-text-渲染标题" tabindex="-1"><code>dv.header(level, text)</code> 渲染标题</h4><p>使用所给的文本渲染 1~6 级标题。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>dv.header(1, &quot;Big!&quot;);</span></span>
<span class="line"><span>dv.header(6, &quot;Tiny&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="dv-paragraph-text-渲染文本" tabindex="-1"><code>dv.paragraph(text)</code> 渲染文本</h4><p>在段落中呈现任意文本。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>dv.paragraph(&quot;This is some text&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="数据展示" tabindex="-1">数据展示</h3><h4 id="dv-list-elements-列表视图" tabindex="-1"><code>dv.list(elements)</code> 列表视图</h4><p>呈现元素的dataview列表。参数允许普通数组和数据数组。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>dv.list([1, 2, 3]) =&gt; list of 1, 2, 3</span></span>
<span class="line"><span>dv.list(dv.pages().file.name) =&gt; list of all file names</span></span>
<span class="line"><span>dv.list(dv.pages().file.link) =&gt; list of all file links</span></span>
<span class="line"><span>dv.list(dv.pages(&quot;#book&quot;).where(p =&gt; p.rating &gt; 7)) =&gt; list of all books with rating greater than 7</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="dv-tasklist-tasks-groupbyfile-任务视图" tabindex="-1"><code>dv.taskList(tasks, groupByFile)</code> 任务视图</h4><p>呈现由 <code>page.file.tasks</code> 获得的“Task”对象的dataview列表。只需要第一个参数；如果提供了第二个参数“groupByFile”（且为true），则任务将根据它们来自的文件自动分组。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>// List all tasks from pages marked &#39;#project&#39;</span></span>
<span class="line"><span>dv.taskList(</span></span>
<span class="line"><span>	dv.pages(&quot;#project&quot;).file.tasks</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// List all *uncompleted* tasks from pages marked #project</span></span>
<span class="line"><span>dv.taskList(</span></span>
<span class="line"><span>	dv.pages(&quot;#project&quot;).file.tasks</span></span>
<span class="line"><span>    .where(t =&gt; !t.completed)</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// List all tasks tagged with &#39;#tag&#39; from pages marked #project</span></span>
<span class="line"><span>dv.taskList(</span></span>
<span class="line"><span>	dv.pages(&quot;#project&quot;).file.tasks</span></span>
<span class="line"><span>    .where(t =&gt; t.text.includes(&quot;#tag&quot;))		// 这里的 t 指代的是 dv.pages(&quot;#project&quot;).file.tasks 中的每个项目，在这里即为任务对象</span></span>
<span class="line"><span>)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="dv-table-headers-elements-表格视图" tabindex="-1"><code>dv.table(headers, elements)</code> 表格视图</h4><p>使用给定的表头列表和二维元素数组呈现dataview表。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>// Render a simple table of book info sorted by rating.</span></span>
<span class="line"><span>dv.table(</span></span>
<span class="line"><span>	[&quot;File&quot;, &quot;Genre&quot;, &quot;Time Read&quot;, &quot;Rating&quot;], </span></span>
<span class="line"><span>	dv.pages(&quot;#book&quot;)</span></span>
<span class="line"><span>    .sort(b =&gt; b.rating)	// 这里的 b 指代的是 dv.pages(&quot;#book&quot;) 中的每个项目，在这里即为文件对象</span></span>
<span class="line"><span>    .map(b =&gt; [b.file.link, b.genre, b[&quot;time-read&quot;], b.rating]))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实用功能函数" tabindex="-1">实用功能函数</h3><h4 id="dv-array-value-普通数组转数据数组" tabindex="-1"><code>dv.array(value)</code> 普通数组转数据数组</h4><p>在[DataArray中的转换](#DataArray 与普通数组的转换)中介绍过。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>dv.array([1, 2, 3]) =&gt; dataview data array [1, 2, 3]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="dv-compare-a-b-比较" tabindex="-1"><code>dv.compare(a, b)</code> 比较</h4><p>根据dataview的默认比较规则比较两个任意JavaScript值；如果您正在编写自定义比较器并希望返回默认行为，则此选项非常有用。如果 <code>a&lt;b</code>，则返回负值；如果 <code>a=b</code>，则返回0；如果 <code>a&gt;b</code>，则返回正值。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>dv.compare(1, 2) = -1</span></span>
<span class="line"><span>dv.compare(&quot;yes&quot;, &quot;no&quot;) = 1</span></span>
<span class="line"><span>dv.compare({ what: 0 }, { what: 0 }) = 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="dv-equal-a-b-相等" tabindex="-1"><code>dv.equal(a, b)</code> 相等？</h4><p>根据Dataview的默认比较规则，比较两个任意JavaScript值，如果它们相等，则返回true。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>dv.equal(1, 2) = false</span></span>
<span class="line"><span>dv.equal(1, 1) = true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="js-的代码调试方法" tabindex="-1">JS 的代码调试方法</h2><p>可以使用 <code>alert()</code> 输出想要的信息（不推荐）；</p><p>也可以打开控制台：<kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>i</kbd> ，然后使用 <code>console.log()</code> 输出信息到控制台（<strong>推荐</strong>）。</p><p>想看 <code>DataArray</code> 类型的文件都含有什么属性？使用以下代码即可在控制台查看其属性，然后调用就可以了：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">​</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`\`\`dataviewjs</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">console.log(&quot;这是 file 的属性&quot;);</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">console.log(dv.current().file);</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">console.log(&quot;这是 file.tasks 的属性&quot;);</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">console.log(dv.current().file.tasks);</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">​\`\`\`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="例子" tabindex="-1">例子</h2><p>都是自用的例子，只是能用的级别。</p><p>我的文件存放方式大致如下：</p><ul><li><code>根目录</code><ul><li><code>主 moc.md</code>（这个用来索引资源、项目的 moc 文件）</li><li><code>项目</code>（项目文件夹） <ul><li><code>水质检测项目</code>（这个是一个项目文件夹） <ul><li><code>水质检测项目.md</code>（这个是和文件夹相同名称的文档，也是该文件夹下所有文件的索引，即 moc）</li><li><code>文档1.md</code></li><li><code>文档2.md</code></li><li>……</li></ul></li><li>……</li></ul></li><li><code>资源</code>（资源文件夹） <ul><li><code>markdown</code>（这个是一个资源文件夹） <ul><li><code>markdown.md</code>（这个是和文件夹相同名称的文档，也是该文件夹下所有文件的索引，即 moc）</li><li><code>文档1.md</code></li><li><code>文档2.md</code></li><li>……</li></ul></li><li>……</li></ul></li></ul></li></ul><p>下面结合我的文件存放方式说几个例子。</p><h3 id="示例一-获取当前文件所在文件夹下所有文件的任务并计算总进度" tabindex="-1">示例一：获取当前文件所在文件夹下所有文件的任务并计算总进度</h3><p>该代码块可以放入某个项目或者资源文件夹中的moc文件，用于总览该项目或资源的任务进度。当然你也可以将代码放入该文件夹下的其他文件，这就看个人需求了，重点是看懂代码。</p><p>例如将代码放入下图所示的 <code>水质检测项目.md</code> 文件中：</p><p><code>![image-20210816104300278](assets/image-20210816104300278.png)</code> (文件缺失)</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">​</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`\`\`dataviewjs</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">// 计算任务进度</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">var allTask = 0;		//用于计算任务总数</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">var completedTask = 0;	//用于计算文件完成数目</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">for(var task of dv.pages().file.tasks.where(t =&gt; t.path.match(dv.current().file.folder))){</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	if(task.completed){</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">		completedTask++;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	}</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	allTask++;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">// 展示任务进度</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">if(allTask){</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	dv.paragraph(&#39;任务完成进度：**&#39; + (completedTask/allTask * 100).toFixed(1) + &#39;%**&#39;)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">// 获取并展示当前文件夹下所有文件的任务</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">dv.taskList(</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	dv.pages().file.tasks</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	.where(t =&gt; t.path.match(dv.current().file.folder))</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	.sort(t =&gt; t.ctime)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">​\`\`\`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="示例二-获取当前文件所在文件夹下未被本文档链接的文档" tabindex="-1">示例二：获取当前文件所在文件夹下未被本文档链接的文档</h3><p>我的文件存储方式是某个项目或资源的文件夹中的 moc 文档会使用 <code>[[文档名]]</code> 来链接其它文档，例如：</p><div class="language-markdown line-numbers-mode" data-highlighter="shiki" data-ext="markdown" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-markdown"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">这是 markdown.md 文件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">markdown 使用很方便，可以通过 [</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">简介</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] 了解，然后通过 [</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">快速上手</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] 进行学习。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的这个资源文件 moc 只引用其文件夹下的 2 个文档，有时一个资源文件夹下有很多文档，有的可能并未被链接，我们也很难发现，这时使用下列代码来实现获取当前文件夹下未被本文档链接的文档。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">​</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`\`\`dataviewjs</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">// 初步筛选，筛选2次，先获得当前文件夹下的文档，再去除当前文档</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">var currentFolderFilesExceptThis = dv.pages().file</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	.where(b =&gt; b.path.indexOf(dv.current().file.folder)!=-1)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	.where(b =&gt; b.path!=dv.current().file.path);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">// 进一步筛选，获取未被当前文档链接的文档</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">var pages = new Array();	//创建新数组用于存放未被链接的文件</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">var linked;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">for(var file of currentFolderFilesExceptThis){</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	linked = 0;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	for(var outlink of dv.current().file.outlinks){</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">		if(outlink.path==file.path){</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">			linked = 1;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">			break;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">		}</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	}</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	if(!linked){</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">		pages.push(file)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	}</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">// 将普通数组转换为DataArray类型</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">dv.list(dv.array(pages).link);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">​\`\`\`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="示例三-获取某目录下资源或项目文件夹的-moc-文档链接、标签和任务进度" tabindex="-1">示例三：获取某目录下资源或项目文件夹的 moc 文档链接、标签和任务进度</h3><p>这个文件放在 <code>主 moc.md</code> 中，它可以某目录下资源或项目文件夹的 moc 文档链接、标签和任务进度。</p><p>下方是获取资源文件夹中的资源文件的 moc 文档链接、标签和任务进度：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">​</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`\`\`dataviewjs</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">// 写入 moc文件所在文件夹的父文件夹的路径</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">const Path = &quot;资源/&quot;;	// x</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">// 获取指定目录下各文件夹中的 moc 文件</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">var mocFiles = dv.pages().file</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	.where(b =&gt; b.path.indexOf(Path)!=-1)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	.where(b =&gt; b.path.endsWith(b.name + &#39;/&#39; + b.name + &#39;.md&#39;))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">// 处理 moc 文件的标签、任务进度</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">for(var mocFile of mocFiles){</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	// 处理标签：获取该 moc 所在文件夹下的所有标签（无重复显示标签）</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	var allTags = new Array();</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	for(var file of dv.pages().file.where(b =&gt; b.path.match(mocFile.folder))){</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">		for(var tag of file.tags){</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">			if(allTags.indexOf(tag)==-1){</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">				allTags.push(tag)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">			}</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">		}</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	}</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	mocFile[&quot;myTags&quot;] = &#39;&#39;;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	for(var tag of allTags){</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">		mocFile[&quot;myTags&quot;] = mocFile[&quot;myTags&quot;] + tag + &#39; &#39;;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	}</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	// 处理任务进度：获取该 moc 文件所在文件夹下所有的任务并计算任务进度</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	var allTask = 0;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	var completedTask = 0;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	for(var task of dv.pages().file.tasks.where(t =&gt; t.path.match(mocFile.folder))){</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">		if(task.completed){</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">			completedTask++;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">		}</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">		allTask++;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	}</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	if(allTask){</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">		mocFile[&quot;jindu&quot;] = &#39;任务完成进度：**&#39; + (completedTask/allTask * 100).toFixed(1) + &#39;%**&#39;;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	}</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">// 展示成表格的形式</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">dv.table(</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	[&#39;文件&#39;, &#39;标签&#39;, &#39;任务&#39;],</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	mocFiles</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	.map(b =&gt; [b.link, b.myTags, b.jindu])</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">​\`\`\`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,245))])}const u=e(r,[["render",c]]),v=JSON.parse('{"path":"/Dataview%E7%BF%BB%E8%AF%91%20by%20%E5%AF%A1%E4%BA%BA.html","title":"dataview","lang":"zh-CN","frontmatter":{"uid":202108160803,"aliases":[],"tags":[],"from":null,"description":"最新的图文版：https://wws.lanzoui.com/ivW46spygfi 翻译自 Dataview，翻译了一部分，有不对的自行辨别，希望可以帮助更多人使用 dataview 这款优秀的 obsidian 插件。 dataview 查询语法格式 该插件的 dataview 代码块的使用方法类似于SQL，下面是一个普通的SQL语句： datav...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"dataview\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://LincDocs.github.io/obsidian-chinese-help/01 2021新教程/Dataview%E7%BF%BB%E8%AF%91%20by%20%E5%AF%A1%E4%BA%BA.html"}],["meta",{"property":"og:site_name","content":"obsidian-chinese-help/01 2021新教程"}],["meta",{"property":"og:title","content":"dataview"}],["meta",{"property":"og:description","content":"最新的图文版：https://wws.lanzoui.com/ivW46spygfi 翻译自 Dataview，翻译了一部分，有不对的自行辨别，希望可以帮助更多人使用 dataview 这款优秀的 obsidian 插件。 dataview 查询语法格式 该插件的 dataview 代码块的使用方法类似于SQL，下面是一个普通的SQL语句： datav..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}]],"tag":[]},"git":{},"readingTime":{"minutes":22.11,"words":6632},"filePathRelative":"Dataview翻译 by 寡人.md","excerpt":"<p><a href=\\"/obsidian-chinese-help/01 2021新教程/寡人.html\\" target=\\"_blank\\">寡人</a><br>\\n最新的图文版：<a href=\\"https://wws.lanzoui.com/ivW46spygfi\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://wws.lanzoui.com/ivW46spygfi</a></p>\\n<blockquote>\\n<p>翻译自 <a href=\\"https://blacksmithgu.github.io/obsidian-dataview/intro/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Dataview</a>，翻译了一部分，有不对的自行辨别，希望可以帮助更多人使用 dataview 这款优秀的 obsidian 插件。</p>\\n</blockquote>","autoDesc":true,"bioChainData":{"outlink":[{"title":"寡人","link":"寡人.html"}],"backlink":[],"localMap":{"nodes":[{"id":"Dataview翻译 by 寡人.md","value":{"title":"Dataview翻译 by 寡人","path":"Dataview翻译 by 寡人.md","outlink":["寡人.md"],"backlink":[]}},{"id":"寡人.md","value":{"title":"寡人","path":"寡人.md","outlink":[],"backlink":[]}}],"links":[{"source":"Dataview翻译 by 寡人.md","target":"寡人.md"}]}}}');export{u as comp,v as data};
