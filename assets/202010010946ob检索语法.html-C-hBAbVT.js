import{_ as i,c as l,a,b as t,d as o,e as n,w as r,r as p,o as c}from"./app-Dh2R83q2.js";const h={};function d(u,e){const s=p("RouteLink");return c(),l("div",null,[a("p",null,[o(s,{to:"/07 信息源与贡献者/Silver.html"},{default:r(()=>[...e[0]||(e[0]=[n("Silver",-1)])]),_:1}),e[1]||(e[1]=n("所有检索语法在这里：",-1)),e[2]||(e[2]=a("a",{href:"https://publish.obsidian.md/help/Plugins/Search",target:"_blank",rel:"noopener noreferrer"},"https://publish.obsidian.md/help/Plugins/Search",-1)),e[3]||(e[3]=a("br",null,null,-1)),e[4]||(e[4]=n(" 或者在ob自带的帮助文档中寻找",-1))]),e[5]||(e[5]=t(`<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>Complex searches</span></span>
<span class="line"><span>When crafting a search query, remember that clicking &quot;Explain Search Term&quot; will give an explanation of what is being searched for, which can be very useful when debugging a complicated search.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Words in the search query separated by space will be searched independently in each note. For example foo bar will find a note that includes both foo and bar anywhere in it.</span></span>
<span class="line"><span>&quot;Quoted strings&quot; can be used to search multiple consecutive words separated by space, or in other words, a phrase. So, searching for &quot;foo bar&quot; with quotes will only find notes that include those words next to each other. You can use backslash \\&quot; to escape double quotes if you actually want to search for a string that includes quotes. And \\\\ will do the same for backslash.</span></span>
<span class="line"><span>Boolean operations can be used. Use OR to match one or another. Use - to negate a query. The space character is used for boolean &quot;and&quot;.</span></span>
<span class="line"><span>For example: foo OR bar will find all notes that contain either of those words, they don&#39;t have to be in the same note. foo -bar will find all notes that contain foo, but not if they also contain bar.</span></span>
<span class="line"><span>Parenthesis can be used to group boolean operations. For example (a OR b) (c OR d). This can be useful when crafting complex searches to make sure things happen in the order you want.</span></span>
<span class="line"><span>Regular expressions (regex) can now be used in search. Use forward slash to denote a regular expression. For example: /[a-z]{3}/.</span></span>
<span class="line"><span>Several special operators are available. Some operators allow nesting queries using parenthesis, for example: file:(&quot;to be&quot; OR -&quot;2B&quot;).</span></span>
<span class="line"><span>file: will perform the following subquery on the file name. For example: file:&quot;.jpg&quot;. If you use Zettelkasten-style UIDs, this can be useful for narrowing a time range, for example file:&quot;202007&quot;for files created in July of 2020.</span></span>
<span class="line"><span>path: will perform the following subquery on the file path, absolute from the root. For example: file:&quot;Daily Notes/2020-07&quot;.</span></span>
<span class="line"><span>match-case: and ignore-case: will override the case sensitive match logic for the following subquery.</span></span>
<span class="line"><span>Search Settings</span></span>
<span class="line"><span>There are a couple of toggles available while searching:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Collapse results will toggle between just showing matching note names and showing the lines in which matches appear. These extended results can be toggled for each note by clicking on the folding triangle next to the file name.</span></span>
<span class="line"><span>Match case toggle case sensitive matching, but note that it can be overridden on a per-search basis using the match-case: and ignore-case: operators explained above.</span></span>
<span class="line"><span>Explain search term will show you what the search query actually does in plain terms.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1))])}const m=i(h,[["render",d]]),g=JSON.parse(`{"path":"/09%20%E7%A2%8E%E8%AE%B0/202010010946ob%E6%A3%80%E7%B4%A2%E8%AF%AD%E6%B3%95.html","title":"202010010946ob检索语法","lang":"zh-CN","frontmatter":{"description":"所有检索语法在这里：https://publish.obsidian.md/help/Plugins/Search 或者在ob自带的帮助文档中寻找","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-30T01:29:06.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://LincDocs.github.io/obsidian-chinese-help/09%20%E7%A2%8E%E8%AE%B0/202010010946ob%E6%A3%80%E7%B4%A2%E8%AF%AD%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"obsidian-chinese-help"}],["meta",{"property":"og:description","content":"所有检索语法在这里：https://publish.obsidian.md/help/Plugins/Search 或者在ob自带的帮助文档中寻找"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-30T01:29:06.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-30T01:29:06.000Z"}]]},"git":{"createdTime":1761787746000,"updatedTime":1761787746000,"contributors":[{"name":"Linc","username":"Linc","email":"762699299@qq.com","commits":1,"url":"https://github.com/Linc"}]},"readingTime":{"minutes":1.57,"words":472},"filePathRelative":"09 碎记/202010010946ob检索语法.md","excerpt":"<p><a href=\\"/obsidian-chinese-help/07 信息源与贡献者/Silver.html\\" target=\\"_blank\\">Silver</a>所有检索语法在这里：<a href=\\"https://publish.obsidian.md/help/Plugins/Search\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://publish.obsidian.md/help/Plugins/Search</a><br>\\n或者在ob自带的帮助文档中寻找</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-\\"><span class=\\"line\\"><span>Complex searches</span></span>\\n<span class=\\"line\\"><span>When crafting a search query, remember that clicking \\"Explain Search Term\\" will give an explanation of what is being searched for, which can be very useful when debugging a complicated search.</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>Words in the search query separated by space will be searched independently in each note. For example foo bar will find a note that includes both foo and bar anywhere in it.</span></span>\\n<span class=\\"line\\"><span>\\"Quoted strings\\" can be used to search multiple consecutive words separated by space, or in other words, a phrase. So, searching for \\"foo bar\\" with quotes will only find notes that include those words next to each other. You can use backslash \\\\\\" to escape double quotes if you actually want to search for a string that includes quotes. And \\\\\\\\ will do the same for backslash.</span></span>\\n<span class=\\"line\\"><span>Boolean operations can be used. Use OR to match one or another. Use - to negate a query. The space character is used for boolean \\"and\\".</span></span>\\n<span class=\\"line\\"><span>For example: foo OR bar will find all notes that contain either of those words, they don't have to be in the same note. foo -bar will find all notes that contain foo, but not if they also contain bar.</span></span>\\n<span class=\\"line\\"><span>Parenthesis can be used to group boolean operations. For example (a OR b) (c OR d). This can be useful when crafting complex searches to make sure things happen in the order you want.</span></span>\\n<span class=\\"line\\"><span>Regular expressions (regex) can now be used in search. Use forward slash to denote a regular expression. For example: /[a-z]{3}/.</span></span>\\n<span class=\\"line\\"><span>Several special operators are available. Some operators allow nesting queries using parenthesis, for example: file:(\\"to be\\" OR -\\"2B\\").</span></span>\\n<span class=\\"line\\"><span>file: will perform the following subquery on the file name. For example: file:\\".jpg\\". If you use Zettelkasten-style UIDs, this can be useful for narrowing a time range, for example file:\\"202007\\"for files created in July of 2020.</span></span>\\n<span class=\\"line\\"><span>path: will perform the following subquery on the file path, absolute from the root. For example: file:\\"Daily Notes/2020-07\\".</span></span>\\n<span class=\\"line\\"><span>match-case: and ignore-case: will override the case sensitive match logic for the following subquery.</span></span>\\n<span class=\\"line\\"><span>Search Settings</span></span>\\n<span class=\\"line\\"><span>There are a couple of toggles available while searching:</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>Collapse results will toggle between just showing matching note names and showing the lines in which matches appear. These extended results can be toggled for each note by clicking on the folding triangle next to the file name.</span></span>\\n<span class=\\"line\\"><span>Match case toggle case sensitive matching, but note that it can be overridden on a per-search basis using the match-case: and ignore-case: operators explained above.</span></span>\\n<span class=\\"line\\"><span>Explain search term will show you what the search query actually does in plain terms.</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[{"title":"Silver","link":"07 信息源与贡献者/Silver.html"}],"backlink":[],"localMap":{"nodes":[{"id":"09 碎记/202010010946ob检索语法.md","value":{"title":"202010010946ob检索语法","path":"09 碎记/202010010946ob检索语法.md","outlink":["07 信息源与贡献者/Silver.md"],"backlink":[]}},{"id":"07 信息源与贡献者/Silver.md","value":{"title":"Silver","path":"07 信息源与贡献者/Silver.md","outlink":[],"backlink":[]}}],"links":[{"source":"09 碎记/202010010946ob检索语法.md","target":"07 信息源与贡献者/Silver.md"}]}}}`);export{m as comp,g as data};
